service: todo

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 128
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminSetUserPassword
          Resource:
            - !GetAtt UserPool.Arn
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:provider.environment.TOKEN_GENERATOR_ARN}
            # - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:todo-dev-preTokenGeneration

  httpApi:
    authorizers:
      userAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !Join
          - ""
          - - "https://cognito-idp."
            - !Ref "AWS::Region"
            - ".amazonaws.com/"
            - !Ref "UserPool"
        audience: { Ref: UserPoolClient }
  environment:
    USER_POOL_NAME: ${self:service}-user-pool-${self:provider.stage}
    USER_POOL_CLIENT_NAME: ${self:service}-user-pool-client-${self:provider.stage}
    USER_POOL_REF: !Ref UserPool
    USER_POOL_CLIENT_REF: !Ref UserPoolClient
    TOKEN_GENERATOR_ARN: ${self:service}-${self:provider.stage}-token-generator

plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-plugin-typescript

functions:
  hello:
    handler: src/hello.handler
    events:
      - httpApi:
          path: /hello
          method: GET
          authorizer:
            name: userAuthorizer
  register:
    handler: src/register.handler
    events:
      - httpApi:
          path: /register
          method: POST
  login:
    handler: src/login.handler
    events:
      - httpApi:
          path: /login
          method: POST
  token-generator:
    name: ${self:provider.environment.TOKEN_GENERATOR_ARN}
    handler: src/tokenPatcher.handler

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

resources:
  Resources:
    PreSignUpLambdaFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ../lambdas/cognito-user-pools-auto-confirm
        Handler: index.handler
        MemorySize: 128
        Role: !GetAtt DevPortalLambdaExecutionRole.Arn
        Runtime: nodejs4.3
        Timeout: 3

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        UserPoolAddOns:
          AdvancedSecurityMode: ENFORCED
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
        LambdaConfig:
          # PreTokenGeneration: arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:provider.environment.TOKEN_GENERATOR_ARN}
          PreTokenGeneration: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:provider.environment.TOKEN_GENERATOR_ARN}"
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: UserPool
        ClientName: ${self:service}-user-pool-client-${self:provider.stage}
        GenerateSecret: false
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH

    # LambdaExecutionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: "Allow"
    #           Principal:
    #             Service: "lambda.amazonaws.com"
    #           Action: "sts:AssumeRole"
    #     Policies:
    #       - PolicyName: "lambdaPolicy"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "logs:CreateLogGroup"
    #                 - "logs:CreateLogStream"
    #                 - "logs:PutLogEvents"
    #               Resource: "*"
