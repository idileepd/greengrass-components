service: todo

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 128
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminSetUserPassword
          Resource:
            - !GetAtt UserPool.Arn
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-token-generator

  httpApi:
    authorizers:
      userAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !Join
          - ""
          - - "https://cognito-idp."
            - !Ref "AWS::Region"
            - ".amazonaws.com/"
            - !Ref "UserPool"
        audience: { Ref: UserPoolClient }
  environment:
    USER_POOL_NAME: ${self:service}-user-pool-${self:provider.stage}
    USER_POOL_CLIENT_NAME: ${self:service}-user-pool-client-${self:provider.stage}
    USER_POOL_REF: !Ref UserPool
    USER_POOL_CLIENT_REF: !Ref UserPoolClient
    TOKEN_GENERATOR_ARN: ${self:service}-${self:provider.stage}-token-generator

plugins:
  - serverless-webpack
  - serverless-offline

functions:
  hello:
    handler: src/hello.handler
    events:
      - httpApi:
          path: /hello
          method: GET
          authorizer:
            name: userAuthorizer
  # register:
  #   handler: src/register.handler
  #   events:
  #     - httpApi:
  #         path: /register
  #         method: POST
  # login:
  #   handler: src/login.handler
  #   events:
  #     - httpApi:
  #         path: /login
  #         method: POST
  # # token-generator:
  # #   handler: src/tokenPatcher.handler
  # #   name: ${self:service}-${self:provider.stage}-token-generator
  # #   package:
  # #     artifact: ./tokenPatcher.zip # Ensure you have a deployment package ready

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        UserPoolAddOns:
          AdvancedSecurityMode: ENFORCED
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
        LambdaConfig:
          PreTokenGeneration: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-token-generator"
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: UserPool
        ClientName: ${self:service}-user-pool-client-${self:provider.stage}
        GenerateSecret: false
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH

    TokenGeneratorLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: ${self:service}-${self:provider.stage}-token-generator
        Handler: index.handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: nodejs18.x
        # Code:
        #   ZipFile: |
        #     'use strict';
        #     exports.handler = async (event) => {
        #       console.log('Received event:', JSON.stringify(event, null, 2));
        #       // Implement your custom logic here
        #       const response = {
        #         statusCode: 200,
        #         body: JSON.stringify('Hello from Lambda!'),
        #       };
        #       return response;
        #     };
        Code:
          ZipFile: ${file(src/tokenPatcher.ts)}
          # ZipFile: |
          #   'use strict';
          #   exports.handler = async (event) => {
          #     console.log('Received event:', JSON.stringify(event, null, 2));
          #     // Implement your custom logic here
          #     event.response = {
          #       claimsOverrideDetails: {
          #         claimsToAddOrOverride: {
          #           // Add custom claims here
          #           test: "test-data-v2",
          #           "custom:additionalData": "someValue",
          #           "ttttt": {
          #             "cool":"test"
          #           }
          #         },
          #       },
          #     };

          #     return event;
          #   };

    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "lambdaPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
          - PolicyName: "UserPoolLambdaInvokePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-token-generator"

    PreTokenGenerationLambdaPermission:
      DependsOn: TokenGeneratorLambda
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-token-generator"
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: !GetAtt UserPool.Arn
